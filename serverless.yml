service: scrbrd

plugins:
  - serverless-plugin-common-excludes
  - serverless-plugin-include-dependencies
  - '@anttiviljami/serverless-stack-output'

custom:
  output:
    file: ./client/data.json
  stage: ${opt:stage, 'dev'}

package:
  individually: true
  patterns:
    # - "!.*/**"
    # - "!frontend/**"
    # - "!**/__pycache__/**"
    # - "!venv/**"
    # - "!**/node_modules/**"
    # - "!backend/tests/**"
    # - "!requirements.txt"
    - "!./**"

provider:
  name: aws
  profile: liberaprof
  region: eu-south-1
  runtime: python3.9

  environment:
    APIG_ENDPOINT:
      Fn::Join:
        - ''
        - - Ref: WebsocketsApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${self:custom.stage}
    CONNECTIONS_TABLE:
      Ref: ConnectionsTable
    BOARDS_TABLE:
      Ref: BoardsTable
    EVENTS_TABLE:
      Ref: EventsTable

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:PutItem
          Resource:
            Fn::GetAtt:
              - ConnectionsTable
              - Arn
        - Effect: Allow
          Action:
            - dynamodb:GetItem
          Resource:
            Fn::GetAtt:
              - BoardsTable
              - Arn
        - Effect: Allow
          Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
          Resource:
            Fn::GetAtt:
              - BoardsTable
              - Arn
        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
          Resource:
            Fn::GetAtt:
              - BoardsTable
              - Arn
        - Effect: Allow
          Action:
            - dynamodb:PutItem
          Resource:
            Fn::GetAtt:
              - EventsTable
              - Arn
        - Effect: Allow
          Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
          Resource:
            Fn::GetAtt:
              - EventsTable
              - Arn

functions:
  websocket:
    handler: backend/lambdas/ws_endpoint.lambda_handler
    package:
      patterns:
        - backend/lambdas/__init__.py
        - backend/lambdas/ws_endpoint.py
        - backend/lambdas/ddb_connections_provider.py
        - backend/lambdas/providers.py
    events:
      - websocket:
          route: $connect
#          authorizer:
#            name: authorizer
#            # See https://serverless.com/framework/docs/providers/aws/events/websocket#using-authorizers
#            # and https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-authorizer.html#cfn-apigatewayv2-authorizer-identitysource
#            # for more details on identitySource.
#            # See https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html
#            # for more details on API Gateway mappings.
#            identitySource:
#              - 'route.request.header.X-Forwarded-Proto'
      - websocket:
          route: $disconnect
  websocket-get-board:
    handler: backend/lambdas/ws_get_board.lambda_handler
    package:
      patterns:
        - backend/lambdas/ws_get_board.py
    events:
      - websocket:
          route: getBoard
  websocket-notify:
    handler: backend/lambdas/ws_notify.lambda_handler
    package:
      patterns:
        - backend/lambdas/ws_notify.py
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - BoardsTable
              - StreamArn
  api-events:
    handler: backend/lambdas/api_events_post.lambda_handler
    package:
      patterns:
        - backend/lambdas/api_events_post.py
    events:
      - httpApi:
          method: POST
          path: /events
  events-processor:
    handler: backend/lambdas/events_processor.lambda_handler
    package:
      patterns:
        - backend/lambdas/events_processor.py
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - EventsTable
              - StreamArn


resources:
  Resources:
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: boardId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: boardId
            KeySchema:
              - AttributeName: boardId
                KeyType: HASH
            Projection:
              NonKeyAttributes: []
              ProjectionType: KEYS_ONLY
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        SSESpecification:
          SSEEnabled: true
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
    BoardsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: boardId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: boardId
            KeyType: HASH
        SSESpecification:
          SSEEnabled: true
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    EventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: eventType
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
          - AttributeName: eventType
            KeyType: RANGE
        SSESpecification:
          SSEEnabled: true
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        StreamSpecification:
          StreamViewType: NEW_IMAGE
